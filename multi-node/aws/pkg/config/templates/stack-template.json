{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "kube-aws Kubernetes cluster {{.ClusterName}}",
  {{if .EtcdInitialCluster}}
  "Mappings" : {
    "EtcdInstanceParams" : {
      "UserData" : {
	"cloudconfig" : "{{.UserDataEtcd}}"
      }
    }
  },
  {{end}}
  "Resources": {
    "AutoScaleWorker": {
      "Properties": {
        "AvailabilityZones": [
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
        ],
        "DesiredCapacity": "{{.WorkerCount}}",
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationWorker"
        },
        "MaxSize": "{{.MaxWorkerCount}}",
        "MinSize": "{{.MinWorkerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}"
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}-kube-aws-worker"
          }
        ],
        "VPCZoneIdentifier": [
          {{range $index, $subnet := .Subnets}}
          {{with $subnetLogicalName := printf "Subnet%d" $index}}
          {{if gt $index 0}},{{end}}
          {
            "Ref": "{{$subnetLogicalName}}"
          }
          {{end}}
          {{end}}
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" :
          {{if .WorkerSpotPrice}}
          "0"
          {{else}}
          "{{.WorkerCount}}"
          {{end}},
          "MaxBatchSize" : "1",
          "PauseTime" : "PT2M"
        }
      },
      "DependsOn" : ["AutoScaleController"]
    },
    "AutoScaleController": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
        ],
        "DesiredCapacity": "{{.ControllerCount}}",
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationController"
        },
        "MaxSize": "{{.MaxControllerCount}}",
        "MinSize": "{{.MinControllerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}"
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}-kube-aws-controller"
          }
        ],
        "VPCZoneIdentifier": [
          {{range $index, $subnet := .Subnets}}
          {{with $subnetLogicalName := printf "Subnet%d" $index}}
          {{if gt $index 0}},{{end}}
          {
            "Ref": "{{$subnetLogicalName}}"
          }
          {{end}}
          {{end}}
        ],
	"LoadBalancerNames" : [
	  { "Ref" : "ElbAPIServer" }
	]
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "{{.ControllerCount}}",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT2M"
        }
      }
    },
    {{ if .CreateRecordSet }}
    "ExternalDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
	{{ if .HostedZoneID }}
        "HostedZoneId": "{{.HostedZoneID}}",
	{{else}}
        "HostedZoneName": "{{.HostedZone}}",
	{{ end }}
        "Name": "{{.ExternalDNSName}}",
        "TTL": {{.RecordSetTTL}},
        "ResourceRecords": [{ "Fn::GetAtt": ["ElbAPIServer", "DNSName"]}],
        "Type": "CNAME"
      }
    },
    {{ end }}
    "IAMInstanceProfileController": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleController"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMInstanceProfileWorker": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleWorker"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    {{if .EtcdInitialCluster}}
    "BackupBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "HealthTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "cloudwatch notifications for etcd.dev.netquestapps.com"
      }
    },
    "AutoScaleEtcdLifecycleHookQueue": {
         "Type": "AWS::SQS::Queue",
         "Properties": {}
       },
       "AutoScaleEtcdLifecycleHookRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
           "AssumeRolePolicyDocument": {
             "Version": "2012-10-17",
             "Statement": [
               {
                 "Effect": "Allow",
                 "Principal": {
                   "Service": [
                     "autoscaling.amazonaws.com"
                   ]
                 },
                 "Action": [
                   "sts:AssumeRole"
                 ]
               }
             ]
           },
           "Path": "/",
           "Policies": [
             {
               "PolicyDocument": {
                 "Version": "2012-10-17",
                 "Statement": [
                   {
                     "Sid": "AllowSQSPublish",
                     "Effect": "Allow",
                     "Action": [
                       "sqs:SendMessage",
                       "sqs:GetQueueUrl"
                     ],
                     "Resource": [
                       {
                         "Fn::GetAtt": [
                           "AutoScaleEtcdLifecycleHookQueue",
                           "Arn"
                         ]
                       }
                     ]
                   },
                   {
                     "Sid": "AllowSNSPublish",
                     "Effect": "Allow",
                     "Action": [
                       "sns:Publish"
                     ],
                     "Resource": [
                       "*"
                     ]
                   }
                 ]
               },
               "PolicyName": "EtcdInstancePolicy"
             }
           ]
         }
       },
       "EtcdBackupHealthAlarm": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
           "ActionsEnabled": true,
           "AlarmActions": [
             {
               "Ref": "HealthTopic"
             }
           ],
           "AlarmDescription": "key backup count",
           "AlarmName": "EtcdBackupKeyCount",
           "ComparisonOperator": "LessThanThreshold",
           "Dimensions": [
             {
               "Name": "AutoScalingGroupName",
               "Value": {
                 "Ref": "AutoScaleEtcd"
               }
             }
           ],
           "EvaluationPeriods": "1",
           "InsufficientDataActions": [
             {
               "Ref": "HealthTopic"
             }
           ],
           "MetricName": "BackupKeyCount",
           "Namespace": "Local/etcd",
           "OKActions": [
             {
               "Ref": "HealthTopic"
             }
           ],
           "Period": "300",
           "Statistic": "Minimum",
           "Threshold": "1",
           "Unit": "Count"
         }
       },
    "AutoScaleEtcd": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "{{.EtcdCount}}",
          "Timeout": "PT5M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "{{.MinEtcdCount}}",
          "PauseTime" : "PT5M",
          "WaitOnResourceSignals": true
        }
      },
      "Properties": {
        "AvailabilityZones": [
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
        ],
        "DesiredCapacity": "{{.EtcdCount}}",
        "HealthCheckGracePeriod": 300,
        "Cooldown": "300",
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationEtcd"
        },
        "MaxSize": "{{.MaxEtcdCount}}",
        "MinSize": "{{.MinEtcdCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}"
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}-kube-aws-etcd"
          }
        ],
        "VPCZoneIdentifier": [
          {{range $index, $subnet := .Subnets}}
          {{with $subnetLogicalName := printf "Subnet%d" $index}}
          {{if gt $index 0}},{{end}}
          {
            "Ref": "{{$subnetLogicalName}}"
          }
          {{end}}
          {{end}}
        ],
        "LoadBalancerNames" : [
      	  { "Ref" : "ElbETCDCluster" }
      	]
            },
            "UpdatePolicy" : {
              "AutoScalingRollingUpdate" : {
                "MinInstancesInService" : "{{.EtcdCount}}",
                "MaxBatchSize" : "1",
                "PauseTime" : "PT2M"
              }
            }
          },
    "IAMInstanceProfileEtcd": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleEtcd"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "AutoScaleEtcdLifecycleHookTerminating": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AutoScaleEtcd"
        },
        "HeartbeatTimeout": 30,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Fn::GetAtt": [
            "AutoScaleEtcdLifecycleHookQueue",
            "Arn"
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AutoScaleEtcdLifecycleHookRole",
            "Arn"
          ]
        }
      }
    },
    {{end}}
    "IAMRoleController": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "IAMRoleWorker": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:Describe*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:AttachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:DetachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    {{if .EtcdInitialCluster}}
    "IAMRoleEtcd": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {
                  "Sid": "AllowBackupBucket",
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "BackupBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "AllowSQS",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:GetQueueUrl",
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AutoScaleEtcdLifecycleHookQueue",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Sid": "AllowIntrospection",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:CompleteLifecycleAction"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "AllowPutMetric",
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    {{end}}
    "LaunchConfigurationWorker": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.WorkerRootVolumeSize}}",
              {{if gt .WorkerRootVolumeIOPS 0}}
              "Iops": "{{.WorkerRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{.WorkerRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileWorker"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.WorkerInstanceType}}",
        "KeyName": "{{.KeyName}}",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupWorker"
          }
        ],
        {{if .WorkerSpotPrice}}
        "SpotPrice": {{.WorkerSpotPrice}},
        {{end}}
        "UserData": "{{ .UserDataWorker }}"
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "LaunchConfigurationController": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.ControllerRootVolumeSize}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileController"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.ControllerInstanceType}}",
        "KeyName": "{{.KeyName}}",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupController"
          }
        ],
        "UserData": "{{ .UserDataController }}"
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "LaunchConfigurationEtcd": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.EtcdDataVolumeSize}}"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
      {{if .EtcdDataVolumeEphemeral}}
      "VirtualName" : "ephemeral0"
      {{else}}
            "Ebs": {
              "VolumeSize": "{{.EtcdDataVolumeSize}}"
          }
      {{end}}
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileEtcd"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.EtcdInstanceType}}",
        "KeyName": "{{.KeyName}}",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupEtcd"
          }
        ],
        "UserData": "{{ .UserDataEtcd }}"
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ElbAPIServer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
	"CrossZone" : true,
	"HealthCheck" : {
	  "HealthyThreshold" : "3",
	  "Interval" : "10",
	  "Target" : "TCP:443",
	  "Timeout" : "8",
	  "UnhealthyThreshold" : "3"
	},
	"Subnets" : [
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          { "Ref" : "Subnet{{$index}}" }
          {{end}}
	],
	"Listeners" : [
	  {
	    "InstancePort" : "443",
	    "InstanceProtocol" : "TCP",
	    "LoadBalancerPort" : "443",
	    "Protocol" : "TCP"
	  }
	],
	"SecurityGroups" : [
	  { "Ref" : "SecurityGroupElbAPIServer" }
	]
      }
    },
    "ElbETCDCluster" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
	"CrossZone" : true,
	"HealthCheck" : {
	  "HealthyThreshold" : "3",
	  "Interval" : "10",
	  "Target" : "TCP:2379",
	  "Timeout" : "8",
	  "UnhealthyThreshold" : "3"
	},
	"Subnets" : [
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          { "Ref" : "Subnet{{$index}}" }
          {{end}}
	],
	"Listeners" : [
	  {
	    "InstancePort" : "2379",
	    "InstanceProtocol" : "TCP",
	    "LoadBalancerPort" : "2379",
	    "Protocol" : "TCP"
	  }
	],
  "Scheme": "internal",
	"SecurityGroups" : [
	  { "Ref" : "SecurityGroupElbETCDCluster" }
	]
      }
    },
    "SecurityGroupElbAPIServer" : {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupElbETCDCluster" : {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 2379,
            "IpProtocol": "tcp",
            "ToPort": 2379
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupController": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "SourceSecurityGroupId" : { "Ref" : "SecurityGroupElbAPIServer" },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          },
	  {
            "SourceSecurityGroupId" : { "Ref" : "SecurityGroupWorker" },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    {{if .EtcdInitialCluster}}
    "SecurityGroupControllerIngressFromWorkerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    {{end}}
    "SecurityGroupWorker": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupWorkerIngressFromControllerToFlannel": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromFlannelToController": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToKubelet": {
      "Properties": {
        "FromPort": 10250,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 10250
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerTocAdvisor": {
      "Properties": {
        "FromPort": 4194,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 4194
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    {{if .EtcdInitialCluster}}
    "SecurityGroupEtcdIngressFromControllerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupEtcdIngressFromWorkerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    {{end}}
    "SecurityGroupWorkerIngressFromWorkerToFlannel": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToWorkerKubeletReadOnly": {
      "Properties": {
        "FromPort": 10255,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10255
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToWorkerHttpsMetrics": {
      "Properties": {
        "FromPort": 10250,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10250
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToControllerKubeletReadOnly": {
      "Properties": {
        "FromPort": 10255,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10255
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToControllerHttpsMetrics": {
      "Properties": {
        "FromPort": 10250,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10250
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToControllerNodeExporter": {
      "Properties": {
        "FromPort": 9100,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 9100
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToWorkerNodeExporter": {
      "Properties": {
        "FromPort": 9100,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 9100
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    {{if .EtcdInitialCluster}}
    "SecurityGroupEtcd": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 3,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "SourceSecurityGroupId" : { "Ref" : "SecurityGroupElbETCDCluster" },
            "FromPort": 2379,
            "IpProtocol": "tcp",
            "ToPort": 2379
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupEtcdMemberIngress": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupEtcdPeerIngress": {
      "Properties": {
        "FromPort": 2380,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "ToPort": 2380
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    }
    {{end}}
    {{range $index, $subnet := .Subnets}}
    {{with $subnetLogicalName := printf "Subnet%d" $index}}
    ,
    "{{$subnetLogicalName}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          }
        ],
        "VpcId": {{$.VPCRef}}
      },
      "Type": "AWS::EC2::Subnet"
    }
    {{end}}
    {{end}}
    {{if not .VPCID}}
    ,
    "{{.VPCLogicalName}}": {
      "Properties": {
        "CidrBlock": "{{.VPCCIDR}}",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          },
          {
            "Key": "Name",
            "Value": "kubernetes-{{.ClusterName}}-vpc"
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "RouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "RouteToInternet": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": { "Ref" : "RouteTable" }
      },
      "Type": "AWS::EC2::Route"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "VPCGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
    {{range $index, $subnet := .Subnets}}
    {{with $subnetLogicalName := printf "Subnet%d" $index}}
    ,
    "{{$subnetLogicalName}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": { "Ref" : "RouteTable"},
        "SubnetId": {
          "Ref": "{{$subnetLogicalName}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
    {{else}}
    {{if .RouteTableID}}
    {{range $index, $subnet := .Subnets}}
    {{with $subnetLogicalName := printf "Subnet%d" $index}}
    ,
    "{{$subnetLogicalName}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": "{{$.RouteTableID}}",
        "SubnetId": {
          "Ref": "{{$subnetLogicalName}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
    {{end}}
    {{end}}

  }
}
